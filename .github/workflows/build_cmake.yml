# The following code is adapted from or inspired by the article:
# "Using GitHub Actions with C++ and CMake" by Cristian Adam.
# Original article available at: https://cristianadam.eu/20191222/using-github-actions-with-c-plus-plus-and-cmake/
#
# Credit and appreciation goes to the original author, Cristian Adam, for sharing the knowledge.

name: CMake All Build Matrix

on: [ workflow_dispatch ] # Trigger manually only

env:
  CMAKE_VERSION: 3.22.1

jobs:
  build:
    name: ${{ matrix.config.name }} - ${{ matrix.config.cmake_preset }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu with GCC", os: ubuntu-latest,
            cc: "gcc", cxx: "g++",
            cmake_preset: "release"
          }
        - {
            name: "Windows with MSVC", os: windows-latest,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            cmake_preset: "release",
            cmake_build_config: "--config Release",
            ctest_config: "-C Release",
          }
        - {
            name: "MacOS with Clang", os: macos-latest,
            cc: "clang", cxx: "clang++",
            cmake_preset: "release"
          }

    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Download and update cmake to specified version
      shell: cmake -P {0}
      run: |
        set(cmake_version ${{ env.CMAKE_VERSION }})

        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

        if("${ { runner.os } }" STREQUAL "Windows")
          set(cmake_suffix "win64-x64.zip")
          set(cmake_dir "cmake-${cmake_version}-win64-x64/bin")
        elseif("${ { runner.os } }" STREQUAL "Linux")
          set(cmake_suffix "Linux-x86_64.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-Linux-x86_64/bin")
        elseif("${ { runner.os } }" STREQUAL "macOS")
          set(cmake_suffix "Darwin-x86_64.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-Darwin-x86_64/CMake.app/Contents/bin")
        endif()

        set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
        file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)

        # Save the path for other steps
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
        # message("::set-output name=cmake_dir::${cmake_dir}")
        message("cmake_dir ${cmake_dir} >> $GITHUB_OUTPUT")

        if(NOT "${ { runner.os } }" STREQUAL "Windows")
          execute_process(
            COMMAND chmod +x ${cmake_dir}/cmake
          )
        endif()

    - name: Verion of cmake
      run: cmake --version

    - name: Create Build Directory
      run: mkdir -p ${{ github.workspace }}/build

    - name: List cmake presets
      run: cmake --list-presets

    - name: Run cmake
      shell: cmake -P {0}
      run: |
        set(ENV{CC} ${{ matrix.config.cc }})
        set(ENV{CXX} ${{ matrix.config.cxx }})

        # Run environment script if specified. Save output to file.
        if("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          execute_process(
            COMMAND "${{ matrix.config.environment_script }}" && set
            OUTPUT_FILE environment_script_output.txt
          )
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if(line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()

        # Windows path separator is ";".
        set(path_separator ":")
        if("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")

        # Run cmake.
        execute_process(
          COMMAND cmake
            -S .
            -B build
            --preset "${{ matrix.config.cmake_preset }}"
          RESULT_VARIABLE result
        )
        if(NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Build
      shell: cmake -P {0}
      run: |
        # Read the output file generated from the envoronment script.
        if("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if(line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()

        message("\n\nPassed Configuration: ${{ matrix.config.cmake_build_config }}\n\n")

        # Run build
        execute_process(
          COMMAND cmake --build build ${{ matrix.config.cmake_build_config }} --parallel
          RESULT_VARIABLE result
          OUTPUT_VARIABLE output
          ERROR_VARIABLE output
          ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
        )
        if(NOT result EQUAL 0)
          string(REGEX MATCH "FAILED:.*$" error_message "${output}")
          string(REPLACE "\n" "%0A" error_message "${error_message}")
          message("::error::${error_message}")
          message(FATAL_ERROR "Build failed")
        endif()

    - name: Run tests
      shell: cmake -P {0}
      run: |
        # include(ProcessorCount)
        # ProcessorCount(N)

        set(ENV{CTEST_OUTPUT_ON_FAILURE} "ON")

        message("\n\nPassed Configuration: ${{ matrix.config.ctest_config }}\n\n")

        # The tests I usually write are not thread safe, but I can add -j ${N} to run tests in parallel.
        execute_process(
          COMMAND ctest ${{ matrix.config.ctest_config }} --verbose
          WORKING_DIRECTORY build
          RESULT_VARIABLE result
          OUTPUT_VARIABLE output
          ERROR_VARIABLE output
          ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
        )
        if(NOT result EQUAL 0)
          string(REGEX MATCH "[0-9]+% tests.*[0-9.]+ sec.*$" test_results "${output}")
          string(REPLACE "\n" "%0A" test_results "${test_results}")
          message("::error::${test_results}")
          message(FATAL_ERROR "Running tests failed!")
        endif()
